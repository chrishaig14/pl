values can be constant or variable
there are also references
references keep the mutability quality of the variable they reference

for example:

const x = 5; // ALWAYS 5, forever and ever
var y = 10; // MIGHT change
ref w = x; // reference to x, just an alias
ref z = y; // reference to y, just an alias

functions are pure, this means they have no side effects:

values are passed to functions by value, this means there is NO FUCKING way you can modify a variable's value by calling a function and passing it as a parameter.

fun divisible_by_3(x){
	debug {
		// you can violate purity here, as long as you don't try to modify an argument
		print("x");
	}
	print("x"); // No fucking way this will work
	return x % 3 == 0; // Something MUST be returned from a function
}

fun dirty_function(x){
	x = 5; // this works because the name "x" inside this function refers to a local variable, but it does not modify the outer variable passed as argument
	return x == 5;
}

var y = 10;
dirty_function(y); // this does not work, as d'oh! functions have no side effects, so this makes no sense, you idiot
print(y); // prints "10"

unless, again, you wrap inside a debug block, which which runs the debug blocks inside the function

procedures DO have side effects
your program MUST have a procedure named main, which will be the first thing executed. A program with no procedures makes no sense, as the program does esentially nothing!!!

proc main {
	var y = 10;
	debug {
		dirty_function(y);
	}
	print(y);
}

values are passed to procedures by reference by default, unless you specify in the procedure definition that certain values will be passed by value

proc foo (ref x, var y, const z){
	x = 10; // changes x, seen from the outside
	y = 100; // changes y right here, not the outside y
	z = 1000; // error, z is const
}

var a = 1;
var b = 2;
var c = 3;

foo(a, b, c);
// ok
	a = 10
	b = 2
	c = 3

const a = 1;
const b = 2;
const c = 3;

foo(a,b,c); 
// error: first argument of foo is ref, but passed a const

var a = 1;
const b = 2;
const c = 3;

foo(a,b,c);
// error: cannot assign value to const z

ref -> ref -> ref
ref -> var -> var
ref -> const -> const

var -> ref -> ref
var -> var -> var
var -> const -> const

const -> ref -> error
const -> var -> ok
const -> const -> const

fun avg(const x){
	total_sum = 0;
	for(y in x){
		total_sum += y;
	}
	return total_sum / x.length;
}

fun filter(const x, const f){
	result = []
	for (y in x){
		if f(y) then return result ++ y
	}
}

fun map(const x, const f){
	var result = x
	for (i in len(result)){
		result[i] = f(result[i])
	}
}

fun map(const x, const f){
	var result = x
	for (ref y in result){
		y = f(y)
	}
}

result = filter(x, foo);
result = x => foo
result = map(x, foo);
result = x <> foo

x.filter(foo).map(l x: x ^ 2)